#1
class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        from collections import defaultdict

        # Построение графа для программы
        graph = defaultdict(list)
        for a, b in connections:
            graph[a].append(b)
            graph[b].append(a)

        # Инициализация переменных
        self.time = 0
        low = [-1] * n
        disc = [-1] * n
        result = []

        def dfs(u, parent): 
            nonlocal graph
            disc[u] = low[u] = self.time
            self.time += 1

            for v in graph[u]:
                if disc[v] == -1:  # Если v не посещён
                    dfs(v, u)
                    low[u] = min(low[u], low[v])  # Обновление времени низшего достигнутого узла

                    # Если соединение (u, v) является мостом
                    if low[v] > disc[u]: result.append([u, v])
                elif v != parent:  # Если v уже посещён и не является родителем
                    low[u] = min(low[u], disc[v])  # Обновление времени низшего достигнутого узла

        # Запуск DFS для всех узлов
        for i in range(n):
            if disc[i] == -1: dfs(i, -1)

        return result



#2
def numOfMinutes(n: int, headID: int, manager: list[int], informTime: list[int]) -> int:
    from collections import defaultdict

    # Построение графа (дерева)
    tree = defaultdict(list)
    for i in range(n): if manager[i] != -1: tree[manager[i]].append(i)

    def dfs(employee):
        # Если у сотрудника нет подчиненных, возвращаем 0
        if employee not in tree: return 0
        
        max_time = 0
        for subordinate in tree[employee]:
            time_needed = dfs(subordinate)  # Рекурсивный вызов для подчиненного
            max_time = max(max_time, time_needed)
        
        return max_time + informTime[employee]

    return dfs(headID)


#3
from collections import defaultdict

def tarjans_scc(graph):
    index = 0
    stack = []
    lowlinks = {}
    index_mapping = {}
    on_stack = set()
    sccs = []

    def strongconnect(v):
        nonlocal index
        lowlinks[v] = index
        index_mapping[v] = index
        index += 1
        stack.append(v)
        on_stack.add(v)

        for w in graph[v]:
            if w not in lowlinks:
                strongconnect(w)
                lowlinks[v] = min(lowlinks[v], lowlinks[w])
            elif w in on_stack:
                lowlinks[v] = min(lowlinks[v], index_mapping[w])

        if lowlinks[v] == index_mapping[v]:
            scc = []
            while True:
                w = stack.pop()
                on_stack.remove(w)
                scc.append(w)
                if w == v: break
            sccs.append(scc)

    for vertex in graph:
        if vertex not in lowlinks: strongconnect(vertex)

    return sccs

def min_edges_to_strongly_connected(graph):
    sccs = tarjans_scc(graph)
    if len(sccs) == 1:
        return 0

    scc_graph = defaultdict(set)
    scc_index = {}
    for i, scc in enumerate(sccs):
        for v in scc:
            scc_index[v] = i

    for v in graph:
        for w in graph[v]:
            if scc_index[v] != scc_index[w]:
                scc_graph[scc_index[v]].add(scc_index[w])

    num_sources = 0
    num_sinks = 0
    in_degrees = [0] * len(sccs)
    out_degrees = [0] * len(sccs)

    for src in scc_graph:
        for dest in scc_graph[src]:
            out_degrees[src] += 1
            in_degrees[dest] += 1

    for i in range(len(sccs)):
        if in_degrees[i] == 0: num_sources += 1
        if out_degrees[i] == 0: num_sinks += 1

    return max(num_sources, num_sinks)


#4
from collections import defaultdict, deque

def find_max_color_path(colors, edges):
    n = len(colors)
    
    # Построение графа
    graph = defaultdict(list)
    for u, v in edges: graph[u].append(v)
    
    # Функция для проверки наличия циклов
    def has_cycle():
        visited = [False] * n
        rec_stack = [False] * n
        
        def dfs(v):
            visited[v] = True
            rec_stack[v] = True
            for neighbor in graph[v]:
                if not visited[neighbor]:
                    if dfs(neighbor): return True
                elif rec_stack[neighbor]: return True
            rec_stack[v] = False
            return False

        for i in range(n):
            if not visited[i]:
                if dfs(i): return True
        return False
    
    if has_cycle(): return -1
    
    # Функция для нахождения максимального цвета вдоль всех путей
    def dfs_color_count(v, color_count):
        color_count[colors[v]] += 1
        max_color_count = color_count[colors[v]]
        
        for neighbor in graph[v]:
            max_color_count = max(max_color_count, dfs_color_count(neighbor, color_count.copy()))
        
        return max_color_count
    
    max_result = 0
    for i in range(n):
        max_result = max(max_result, dfs_color_count(i, defaultdict(int)))
    
    return max_result
